{"version":3,"sources":["../deck.js"],"names":["Deck","wrapper_id","this","slides","currentSlide","currentSlideIndex","wrapper","undefined","isInteger","x","prototype","constructor","setCurrentSlide","slide","setCurrentSlideIndex","index","getCurrentSlideIndex","pushSlide","console","log","push","length","checkActive","popSlide","pop","loadSlide","args","load_filename","load_path","load_index","load_level_id","load_new_level","_deck","loadDivExists","$","append","i","animate","top","delay","empty","remove","fadeOut","show","addClass","load","response","status","xhr","load_time","statusText","name","path","unloadSlide","unload_index","unload_level_id","children","filter","each","pause","window","setTimeout","printData","message","JSON","stringify","removeClass","history","arguments","Array","slice","call"],"mappings":"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","sourcesContent":["function Deck(wrapper_id) {\n    this.slides = [];\n    this.currentSlide = {};\n    this.currentSlideIndex = -1;\n    if (wrapper_id === undefined) {\n        this.wrapper = \"#deck_wrapper\";\n    } else {\n        this.wrapper = \"#\" + wrapper_id;\n    }\n};\n\nDeck.prototype = {\n    constructor: Deck,\n    setCurrentSlide: function(slide) {\n        this.currentSlide = slide;\n    },\n    setCurrentSlideIndex: function(index) {\n        this.currentSlideIndex = index;\n    },\n    getCurrentSlideIndex: function(index) {\n        return this.currentSlideIndex;\n    },\n    pushSlide: function(slide) {\n        console.log('pushSlide');\n        this.slides.push(slide);\n        this.currentSlideIndex++;\n        console.log(\" - this.slides.length: \" + this.slides.length);\n        console.log(\" - this.currentSlideIndex: \" + this.currentSlideIndex);\n        this.checkActive();\n    },\n    popSlide: function() {\n        /* Unload newest slide from slide array */\n        console.log('popSlide');\n        this.slides.pop();\n        console.log(\" - this.slides.length: \" + this.slides.length);\n        this.currentSlideIndex--;\n        console.log(\" - this.currentSlideIndex: \" + this.currentSlideIndex);\n        this.checkActive();\n    },\n    loadSlide: function(args) {\n        console.log('loadSlide');\n        if (args === undefined) {\n            args = [];\n        }\n\n        /* default values */\n        let load_filename = 'home';\n        let load_path = 'slides/';\n        let load_index = -1;\n        let load_level_id = 'slide_level_0';\n        let load_new_level = false;\n\n        /* if there are no slides, new_level is automatically set to true */\n        if (this.slides.length == 0) {\n            args['new_level'] = true;\n            load_new_level = true;\n        }\n\n        if (args['new_level'] !== undefined) {\n            /* new level passed in. load_new_level stays false. */\n            if (args['new_level'] == true) {\n                load_index = (this.currentSlideIndex + 1);\n                load_new_level = true;\n            } else {\n                load_index = this.currentSlideIndex;\n            }\n        } else {\n            /* new level not passed in. load on current level. */\n            load_index = this.currentSlideIndex;\n        }\n\n        if (args['name']) {\n            load_filename = args['name'];\n        }\n        if (args['path']) {\n            load_path = args['path'];\n        }\n\n        load_level_id = 'slide_level_' + load_index;\n\n        const _deck = this;\n\n        let loadDivExists = ($(\"#\" + load_level_id).length == 1);\n        if (!loadDivExists) {\n            $(this.wrapper).append(\"<div class='slide' id='\" + load_level_id + \"'></div>\");\n        }\n        console.log(\" - load_index: \" + load_index);\n\n\n        /* load_reset */\n        // unload all slides and load in new slide\n        if (args['load_reset'] !== undefined) {\n            /* load_reset was passed in */\n            if (args['load_reset'] === true) {\n                /* load_reset was set as true */\n                console.log('load_reset');\n                args['new_level'] == false;\n                for (var i = 1; i < this.slides.length; i++) {\n                    console.log(' - unloadSlide: ' + i);\n\n                    /* handle emptying and removing of slide */\n                    $(\"#slide_level_\" + i).animate({\n                        \"top\": \"1080px\"\n                    }, 100, \"linear\", function() {\n                        $(this).delay(200).empty().remove();\n                    });\n                };\n                this.slides = [];\n                this.currentSlide = args;\n                load_index = 0;\n                load_level_id = 'slide_level_' + load_index;\n            }\n        }\n\n\n        /* empty previous slide first */\n        $(\"#\" + load_level_id).empty();\n        $(\"#\" + load_level_id).fadeOut(10, function() {\n            $(this).show();\n\n            $(\".slide\").addClass('disabled'); // add disabled class to all slides\n            /* Load html into slide */\n            $(this).load(load_path + load_filename + \".html\", function(response, status, xhr) {\n                const load_time = 800;\n                if (status === \"error\") {\n                    console.log(\"error loading \" + load_filename + \", \" + xhr.status + \" \" + xhr.statusText);\n                    $(\"#slide_level_0\").load(\"slides/home.html\", function() {\n                        $(this).animate({\n                            top: 0\n                        })\n                    });\n                    var currentSlide = {\n                        'name': 'home',\n                        'path': 'slides/'\n                    };\n                    _deck.setCurrentSlide(currentSlide);\n                    _deck.pushSlide(currentSlide);\n                } else {\n                    /* No error loading new slide */\n                    $(this).animate({\n                        top: 0\n                    })\n                    console.log(\" - load_new_level: \" + load_new_level);\n                    console.log(\" - _deck.currentSlideIndex: \" + _deck.currentSlideIndex);\n                    if (_deck.slides.length == 0) {\n                        /* no slides */\n                        console.log('no slides');\n                        _deck.currentSlide = args;\n                        _deck.setCurrentSlideIndex(-1); // offset the pushSlide index increment\n                        _deck.pushSlide(args);\n                    } else if (!load_new_level) {\n                        /* replacing current slide */\n                        console.log('replacing current slide');\n                        _deck.popSlide();\n                        _deck.pushSlide(args);\n\n                    } else {\n                        /* new level slide */\n                        console.log('new level slide');\n                        _deck.pushSlide(args);\n                    }\n\n                    _deck.setCurrentSlide(args);\n\n                }\n            });\n        });\n\n\n\n    },\n    unloadSlide: function(index) {\n        console.log('unloadSlide');\n        var unload_index = -1;\n        if (index === undefined) {\n            unload_index = this.currentSlideIndex;\n        } else {\n            unload_index = index;\n        }\n        if (unload_index == -1) {\n            return false; // no slide to unload\n        }\n\n        const unload_level_id = \"slide_level_\" + unload_index;\n\n        /* handle emptying and removing of slide */\n        /* Clean up videos */\n        $(\".slide\").children().filter(\"video\").each(function() {\n            this.pause(); // can't hurt\n            delete(this); // @sparkey reports that this did the trick!\n            $(this).remove(); // not sure if this works after null assignment\n        });\n\n\n        $(\"#\" + unload_level_id).animate({\n            \"top\": \"1080px\"\n        }, 100, \"linear\", function() {\n            window.setTimeout(function() {\n                $(\"#\" + unload_level_id).empty();\n                $(\"#\" + unload_level_id).remove();\n            }, 200);\n        });\n\n        if (this.currentSlideIndex > 0) {\n            this.popSlide();\n            this.currentSlide = this.slides[this.currentSlideIndex];\n        }\n\n        console.log(' - this.currentSlideIndex: ' + this.currentSlideIndex);\n    },\n    printData: function() {\n        console.log('printData');\n        let message = JSON.stringify(this);\n        message += \"\\nthis.currentSlideIndex: \" + this.currentSlideIndex;\n        console.log(message);\n    },\n    checkActive: function() {\n        console.log('checkActive');\n        console.log(\"this.currentSlideIndex: \" + this.currentSlideIndex);\n        $(\".slide\").addClass('disabled');\n        $(\".slide\").removeClass('active');\n        $(\"#slide_level_\" + this.currentSlideIndex).removeClass('disabled');\n        $(\"#slide_level_\" + this.currentSlideIndex).addClass('active');\n    }\n\n}\n\n\n/*  ===================================\n    Helper functions\n    ===================================  */\nfunction isInteger(x) {\n    return x % 1 === 0;\n}\n// usage: log('inside coolFunc',this,arguments);\n// http://paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/\nwindow.log = function() {\n    log.history = log.history || []; // store logs to an array for reference\n    log.history.push(arguments);\n    if (this.console) {\n        console.log(Array.prototype.slice.call(arguments));\n    }\n};"]}